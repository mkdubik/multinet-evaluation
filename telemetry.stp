global tmp_ts /* construct to hold temporary timestamps */
global start

probe begin
{
  start = gettimeofday_ms();
  printf("Starting run %s", ctime(gettimeofday_s()));
}

function timestamp:long(ts) {
  return gettimeofday_ms() - ts
}

probe process("libmultinet.so").function("mlnet::lart::fit")
{
  tmp_ts["lart", "start"] = gettimeofday_ms();
}

probe process("libmultinet.so").function("mlnet::glouvain::fit")
{
  tmp_ts["glouvain", "start"] = gettimeofday_ms();
}

probe process("libmultinet.so").function("mlnet::pmm::fit")
{
  tmp_ts["pmm", "start"] = gettimeofday_ms();
}

probe process("libmultinet.so").mark("lart_end")
{
  printf("LART: %s, %s, %d, %s,%s, %d\n",
    msecs_to_string(timestamp(tmp_ts["lart", "start"])), user_string($arg1), $arg2, user_string($arg3), user_string($arg4), $arg5);
}

probe process("libmultinet.so").mark("glouvain_end")
{
  printf("GLOUVAIN: %s, %s, %s, %s, %s, %d\n",
    msecs_to_string(timestamp(tmp_ts["glouvain", "start"])), user_string($arg1), user_string($arg2), user_string($arg3), user_string($arg4), $arg5);
}

probe process("libmultinet.so").mark("pmm_end")
{
  printf("PMM %s, %s, %d, %d, %d\n",
    msecs_to_string(timestamp(tmp_ts["pmm", "start"])), user_string($arg1), $arg2, $arg3, $arg4);
}

probe end
{
  printf("Finished run in %s \n", msecs_to_string(timestamp(start)));
}
